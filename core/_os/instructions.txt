Here are the list of functions and details on what they do, for if anyone wants to add support for another OS.
The current requirement is only that platform.system() will return the name of the OS, unless you find another way.

get_resolution():
Returns a tuple of the main monitors resolution - (1920, 1080)

get_refresh_rate():
Returns an integer of the main monitors refresh rate - 60
Not currently used so isn't needed at this point, might be in the future though.

get_cursor_pos():
Returns the x, y coordinate of the cursor - (162, 585)
There's a period, at least on windows, where if you leave the mouse long enough it'll stop returning its location.
It usually happens somewhere between when the screensaver starts and when the display turns off.
Check which error it is and return None if it happens.

get_mouse_click():
Returns True or False if the mouse is being clicked.

get_key_press(key):
Returns True or False if the key is being pressed.
See KEYS for defining which keys are tracked.

remove_file(file_name):
Delete a file with the given path, check for OS specific errors.
Returns True or False if the file was deleted or not.

rename_file(file_name, new_name):
Rename a file with the given path, check for OS specific errors.
Returns True or False if the file was deleted or not.

create_folder(path):
Create a folder with the given path, check for OS specific errors.
Returns True or False if the file was deleted or not.

KEYS:
Dictionary containing the ID of each key. The key is a friendly name, and the value is the ID.
As a windows example, win32con contains some of these values, so F1 is win32con.VK_F1.
You can also use the ASCII code. A would be 65, which can also be got from "ord('A')".
First find the function to make get_key_press() work, then experiment to get all the keys.
If there are still some missing keys, just check for keypresses 0-255 in a while loop, and you'll find which they are.
In this case with the examples above, the dictionary would be {'F1': win32con.VK_F1, 'A': ord('A')}
I found that a lowercase A was also captured as an uppercase one, so there was no need adding lowercase values.
As each key is checked 60 times per second, you don't want to have any unnecessary ones.
